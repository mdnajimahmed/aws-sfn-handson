service: aws-sfn-handson

frameworkVersion: '2'

plugins:
  - serverless-step-functions
provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  region: ap-southeast-1


functions:
  hello:
    handler: handler.hello
  add:
    handler: handler.add
  double:
    handler: handler.double
  square:
    handler: handler.square
  bigSquare:
    handler: handler.bigSquare
  finalize:
    handler: handler.finalize
  fetchUsers:
    handler: handler.fetchUsers
  fetchTodos:
    handler: handler.fetchTodos

stepFunctions:
  stateMachines:
    hello:
      name: hello
      definition:
        Comment: The great hello world
        StartAt: Hello
        States:
          Hello:
            Type: Task
            Resource: 
              Fn::GetAtt: [hello,Arn]
            End: true
    method-chaining-math:
      name: method-chaining-math
      definition:
        Comment: Example to demonstrate function chaining using SFN
        StartAt: Add
        States:
          Add:
            Type: Task
            Resource:
              Fn::GetAtt: [add,Arn]
            Next: Double
          Double:
            Type: Task
            Resource:
              Fn::GetAtt: [double,Arn]
            Next: IsBigNumber
          IsBigNumber:
            Type: Choice
            Choices: 
              - Variable: $
                NumericGreaterThan: 50
                Next: BigSquare
            Default: Square
          Square:
            Type: Task
            Resource:
              Fn::GetAtt: [square,Arn]
            End: true
            Retry:
              - ErrorEquals: [NumberIsTooBig]
                MaxAttempts: 0
              - ErrorEquals: [States.ALL]
                MaxAttempts: 3
            Catch:
              - ErrorEquals: [NumberIsTooBig]
                Next: NumberIsTooBigDefaultResponse
          BigSquare:
            Type: Task
            Resource:
              Fn::GetAtt: [bigSquare,Arn]
            End: true
          NumberIsTooBigDefaultResponse:
            Type: Pass
            Result: -1
            End: True
    parallel-poc:
      name: parallel-poc
      definition:
        Comment: A Hello World example of the Amazon States Language using Pass states
        StartAt: InitializeInParallel
        States:
          InitializeInParallel:
            Type: Parallel
            Branches:
            - StartAt: Add
              States:
                Add:
                  Type: Task
                  Resource: 
                    Fn::GetAtt: [add,Arn]
                  Next: Double
                Double:
                  Type: Task
                  Resource: 
                    Fn::GetAtt: [double,Arn]
                  Next: Square
                Square:
                  Type: Task
                  Resource: 
                    Fn::GetAtt: [square,Arn]
                  End: true
            - StartAt: NestedParallel
              States:
                NestedParallel:
                  Type: Parallel
                  Branches:
                  - StartAt: FetchUser
                    States:
                      FetchUser:
                        Type: Task
                        Resource: 
                          Fn::GetAtt: [fetchUsers,Arn]
                        End: true
                  - StartAt: FetchTodo
                    States:
                      FetchTodo:
                        Type: Task
                        Resource: 
                          Fn::GetAtt: [fetchTodos,Arn]
                        End: true
                  End: true
            - StartAt: Wait5Seconds
              States:
                Wait5Seconds:
                  Type: Wait
                  Seconds: 5
                  End: true
            Next: ThenFinalize
          ThenFinalize:
            Type: Task
            Resource: 
              Fn::GetAtt: [finalize,Arn]
            End: true
    all-about-pass:
      name: all-about-pass
      definition:
        StartAt: ParallelPath
        States:
          ParallelPath: 
            Type: Parallel 
            Branches:
              - StartAt: AddZ
                States:
                  AddZ:
                    Type: Pass
                    Result: 42
                    ResultPath: $.z
                    End: true
              - StartAt: OverrideX
                States:
                  OverrideX:
                    Type: Pass
                    Result: 42
                    ResultPath: $.x
                    End: true
            Next: FinalizePath
          FinalizePath:
            Type: Pass
            InputPath: $[0]
            End: True